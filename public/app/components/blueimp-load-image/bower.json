{
  "name": "blueimp-load-image",
  "version": "1.9.1",
  "title": "JavaScript Load Image",
  "description": "JavaScript Load Image is a library to load images provided as File or Blob objects or via URL. It returns an optionally scaled and/or cropped HTML img or canvas element. It also provides a method to parse image meta data to extract Exif tags and thumbnails and to restore the complete image header after resizing.",
  "keywords": [
    "javascript",
    "load",
    "loading",
    "image",
    "file",
    "blob",
    "url",
    "scale",
    "crop",
    "img",
    "canvas",
    "meta",
    "exif",
    "thumbnail",
    "resizing"
  ],
  "homepage": "https://github.com/blueimp/JavaScript-Load-Image",
  "author": {
    "name": "Sebastian Tschan",
    "url": "https://blueimp.net"
  },
  "maintainers": [
    {
      "name": "Sebastian Tschan",
      "url": "https://blueimp.net"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/blueimp/JavaScript-Load-Image.git"
  },
  "devDependencies": {
    "uglify-js": "2.3.6"
  },
  "bugs": "https://github.com/blueimp/JavaScript-Load-Image/issues",
  "licenses": [
    {
      "type": "MIT",
      "url": "http://www.opensource.org/licenses/MIT"
    }
  ],
  "main": [
    "./js/load-image.js",
    "./js/load-image-ios.js",
    "./js/load-image-orientation.js",
    "./js/load-image-meta.js",
    "./js/load-image-exif.js",
    "./js/load-image-exif-map.js"
  ],
  "gitHead": "f905b15c2e30efbec67e71e164c122d71c2bfdcc",
  "readme": "# JavaScript Load Image\n\n## Demo\n[JavaScript Load Image Demo](http://blueimp.github.io/JavaScript-Load-Image/)\n\n## Description\nJavaScript Load Image is a library to load images provided as File or Blob objects or via URL.  \nIt returns an optionally scaled and/or cropped HTML img or canvas element.  \nIt also provides a method to parse image meta data to extract Exif tags and thumbnails and to restore the complete image header after resizing.\n\n## Setup\nInclude the (minified) JavaScript Load Image script in your HTML markup:\n\n```html\n<script src=\"js/load-image.min.js\"></script>\n```\n\nOr alternatively, choose which components you want to include:\n\n```html\n<script src=\"js/load-image.js\"></script>\n<script src=\"js/load-image-ios.js\"></script>\n<script src=\"js/load-image-orientation.js\"></script>\n<script src=\"js/load-image-meta.js\"></script>\n<script src=\"js/load-image-exif.js\"></script>\n<script src=\"js/load-image-exif-map.js\"></script>\n```\n\n## Usage\n\n### Image loading\nIn your application code, use the **loadImage()** function like this:\n\n```js\ndocument.getElementById('file-input').onchange = function (e) {\n    loadImage(\n        e.target.files[0],\n        function (img) {\n            document.body.appendChild(img);\n        },\n        {maxWidth: 600} // Options\n    );\n};\n```\n\n### Image scaling\nIt is also possible to use the image scaling functionality with an existing image:\n\n```js\nvar scaledImage = loadImage.scale(\n    img, // img or canvas element\n    {maxWidth: 600}\n);\n```\n\n## Requirements\nThe JavaScript Load Image library has zero dependencies.\n\nHowever, JavaScript Load Image is a very suitable complement to the [Canvas to Blob](https://github.com/blueimp/JavaScript-Canvas-to-Blob) library.\n\n## API\nThe **loadImage()** function accepts a [File](https://developer.mozilla.org/en/DOM/File) or [Blob](https://developer.mozilla.org/en/DOM/Blob) object or a simple image URL (e.g. \"http://example.org/image.png\") as first argument.\n\nIf a [File](https://developer.mozilla.org/en/DOM/File) or [Blob](https://developer.mozilla.org/en/DOM/Blob) is passed as parameter, it returns a HTML **img** element if the browser supports the [URL](https://developer.mozilla.org/en/DOM/window.URL) API or a [FileReader](https://developer.mozilla.org/en/DOM/FileReader) object if supported, or **false**.  \nIt always returns a HTML [img](https://developer.mozilla.org/en/docs/HTML/Element/Img) element when passing an image URL:\n\n```js\ndocument.getElementById('file-input').onchange = function (e) {\n    var loadingImage = loadImage(\n        e.target.files[0],\n        function (img) {\n            document.body.appendChild(img);\n        },\n        {maxWidth: 600}\n    );\n    if (!loadingImage) {\n        // Alternative code ...\n    }\n};\n```\n\nThe **img** element or [FileReader](https://developer.mozilla.org/en/DOM/FileReader) object returned by the **loadImage()** function allows to abort the loading process by setting the **onload** and **onerror** event handlers to null:\n\n```js\ndocument.getElementById('file-input').onchange = function (e) {\n    var loadingImage = loadImage(\n        e.target.files[0],\n        function (img) {\n            document.body.appendChild(img);\n        },\n        {maxWidth: 600}\n    );\n    loadingImage.onload = loadingImage.onerror = null;\n};\n```\n\nThe second argument must be a **callback** function, which is called when the image has been loaded or an error occurred while loading the image. The callback function is passed one argument, which is either a HTML **img** element, a [canvas](https://developer.mozilla.org/en/HTML/Canvas) element, or an [Event](https://developer.mozilla.org/en/DOM/event) object of type **error**:\n\n```js\nvar imageUrl = \"http://example.org/image.png\";\nloadImage(\n    imageUrl,\n    function (img) {\n        if(img.type === \"error\") {\n            console.log(\"Error loading image \" + imageUrl);\n        } else {\n            document.body.appendChild(img);\n        }\n    },\n    {maxWidth: 600}\n);\n```\n\n## Options\nThe optional third argument to **loadImage()** is a map of options:\n\n* **maxWidth**: Defines the maximum width of the img/canvas element.\n* **maxHeight**: Defines the maximum height of the img/canvas element.\n* **minWidth**: Defines the minimum width of the img/canvas element.\n* **minHeight**: Defines the minimum height of the img/canvas element.\n* **sourceWidth**: The width of the sub-rectangle of the source image to draw into the destination canvas.  \nDefaults to the source image width and requires *canvas: true*.\n* **sourceHeight**: The height of the sub-rectangle of the source image to draw into the destination canvas.  \nDefaults to the source image height and requires *canvas: true*.\n* **top**: The top margin of the sub-rectangle of the source image.  \nDefaults to *0* and requires *canvas: true*.\n* **right**: The right margin of the sub-rectangle of the source image.  \nDefaults to *0* and requires *canvas: true*.\n* **bottom**: The bottom margin of the sub-rectangle of the source image.  \nDefaults to *0* and requires *canvas: true*.\n* **left**: The left margin of the sub-rectangle of the source image.  \nDefaults to *0* and requires *canvas: true*.\n* **contain**: Scales the image up/down to contain it in the max dimensions if set to *true*.  \nThis emulates the CSS feature [background-image: contain](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Scaling_background_images#contain).\n* **cover**: Scales the image up/down to cover the max dimensions with the image dimensions if set to *true*.  \nThis emulates the CSS feature [background-image: cover](https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Scaling_background_images#cover).\n* **crop**: Crops the image to the maxWidth/maxHeight constraints if set to *true*.  \nThis feature assumes *canvas: true*.\n* **orientation**: Allows to transform the canvas coordinates according to the EXIF orientation specification.  \nThis feature assumes *canvas: true*.\n* **canvas**: Returns the image as [canvas](https://developer.mozilla.org/en/HTML/Canvas) element if set to *true*.\n* **crossOrigin**: Sets the crossOrigin property on the img element for loading [CORS enabled images](https://developer.mozilla.org/en-US/docs/HTML/CORS_Enabled_Image).\n* **noRevoke**: By default, the [created object URL](https://developer.mozilla.org/en/DOM/window.URL.createObjectURL) is revoked after the image has been loaded, except when this option is set to *true*.\n\nThey can be used the following way:\n\n```js\nloadImage(\n    fileOrBlobOrUrl,\n    function (img) {\n        document.body.appendChild(img);\n    },\n    {\n        maxWidth: 600,\n        maxHeight: 300,\n        minWidth: 100,\n        minHeight: 50,\n        canvas: true\n    }\n);\n```\n\nAll settings are optional. By default, the image is returned as HTML **img** element without any image size restrictions.\n\n## Meta data parsing\nIf the Load Image Meta extension is included, it is also possible to parse image meta data.  \nThe extension provides the method **loadImage.parseMetaData**, which can be used the following way:\n\n```js\nloadImage.parseMetaData(\n    fileOrBlob,\n    function (data) {\n        if (!data.imageHead) {\n            return;\n        }\n        // Combine data.imageHead with the image body of a resized file\n        // to create scaled images with the original image meta data, e.g.:\n        var blob = new Blob([\n            data.imageHead,\n            // Resized images always have a head size of 20 bytes,\n            // including the JPEG marker and a minimal JFIF header:\n            loadImage.blobSlice.call(resizedImage, 20)\n        ], {type: resizedImage.type});\n    },\n    {\n        maxMetaDataSize: 262144,\n        disableImageHead: false\n    }\n);\n```\n\nThe third argument is an options object which defines the maximum number of bytes to parse for the image meta data, allows to disable the imageHead creation and is also passed along to segment parsers registered via loadImage extensions, e.g. the Exif parser.\n\n**Note:**  \nBlob objects of resized images can be created via [canvas.toBlob()](https://github.com/blueimp/JavaScript-Canvas-to-Blob).\n\n### Exif parser\nIf you include the Load Image Exif Parser extension, the **parseMetaData** callback **data** contains the additional property **exif** if Exif data could be found in the given image.  \nThe **exif** object stores the parsed Exif tags:\n\n```js\nvar orientation = data.exif[0x0112];\n```\n\nIt also provides an **exif.get()** method to retrieve the tag value via the tag's mapped name:\n\n```js\nvar orientation = data.exif.get('Orientation');\n```\n\nBy default, the only available mapped names are **Orientation** and **Thumbnail**.  \nIf you also include the Load Image Exif Map library, additional tag mappings become available, as well as two additional methods, **exif.getText()** and **exif.getAll()**:\n\n```js\nvar flashText = data.exif.getText('Flash'); // e.g.: 'Flash fired, auto mode',\n\n// A map of all parsed tags with their mapped names as keys and their text values:\nvar allTags = data.exif.getAll();\n```\n\nThe Exif parser also adds additional options for the parseMetaData method, to disable certain aspects of the parser:\n\n* **disableExif**: Disables Exif parsing.\n* **disableExifThumbnail**: Disables parsing of the Exif Thumbnail.\n* **disableExifSub**: Disables parsing of the Exif Sub IFD.\n* **disableExifGps**: Disables parsing of the Exif GPS Info IFD.\n\n## iOS scaling fixes\nScaling megapixel images in iOS (iPhone, iPad, iPod) can result in distorted (squashed) images.  \nThe Load Image iOS scaling fixes extension resolves these issues.\n\n## License\nThe JavaScript Load Image script is released under the [MIT license](http://www.opensource.org/licenses/MIT).\n\n## Credits\n\n* Image meta data handling implementation based on the help and contribution of Achim Stöhr.\n* Exif tags mapping based on Jacob Seidelin's [exif-js](https://github.com/jseidelin/exif-js).\n* iOS image scaling fixes based on Shinichi Tomita's [ios-imagefile-megapixel](https://github.com/stomita/ios-imagefile-megapixel).\n",
  "readmeFilename": "README.md",
  "_id": "blueimp-load-image@1.9.1"
}